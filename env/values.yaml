# helm install --name=my-nginx-ingress --namespace=kube-system-ingress . --dry-run --debug |less
# TODO: add public subnets 
# TODO: add dns host
nginxIngressAlbBinding:
  host: '*.alb.eks.mydomain.com.au'
  enabled: true
  annotations:
    kubernetes.io/ingress.class: alb
    # set ALB parameters
    alb.ingress.kubernetes.io/scheme: "internet-facing"
    #Because EKS creates a native pod IP per pod, you can directly go to it without any hopping 
    alb.ingress.kubernetes.io/target-type: "ip"
    # Replace with your public subnets
    alb.ingress.kubernetes.io/subnets: "subnet-replace-me-a,subnet-replace-me-b,subnet-replace-me-c"
    # TODO: Replace below with real arn
    alb.ingress.kubernetes.io/certificate-arn: arn:aws:acm:ap-southeast-2:yyy:certificate/xxxx
    alb.ingress.kubernetes.io/listen-ports: '[{"HTTP":80,"HTTPS": 443}]'
    # allow 404s on the health check
    alb.ingress.kubernetes.io/healthcheck-path: "/"
    alb.ingress.kubernetes.io/success-codes: "200,404"

# More details on: 
# https://github.com/helm/charts/blob/master/incubator/aws-alb-ingress-controller/values.yaml
alb:
  nameOverride: alb-ingress-controller
  clusterName: 'datalake-dev'
  awsRegion: "ap-southeast-2"
  autoDiscoverAwsRegion: false
  awsVpcID: "vpc-xxxx"
  autoDiscoverAwsVpcID: false

  scope: 
    ingressClass: alb
    singleNamespace: true
    watchNamespace: "kube-system-ingress"

  podAnnotations:
    iam.amazonaws.com/role: alb-ingress-controller
  podLabels: {}
  # whether configure readinessProbe on controller pod
  enableReadinessProbe: false
  # How often (in seconds) to check controller readiness
  readinessProbeInterval: 60
  # How long to wait before timeout (in seconds) when checking controller readiness
  readinessProbeTimeout: 3
  # How long to wait (in seconds) before checking the readiness probe
  readinessProbeInitialDelay: 30
  # whether configure livenessProbe on controller pod
  enableLivenessProbe: false
  # How long to wait (in seconds) before checking the liveness probe
  livenessProbeInitialDelay: 30
  rbac:
    create: true
    serviceAccount:
      name: alb-ingress

# More details on:
# https://github.com/helm/charts/tree/master/stable/external-dns
externaldns:
  ## This controls which types of resource external-dns should 'watch' for new
  ## DNS entries.
  sources:
    - ingress
  # When enabled, prints DNS record changes rather than actually performing them
  dryRun: false
  ## Modify how DNS records are sychronized between sources and providers (options: sync, upsert-only )
  policy: upsert-only
  rbac:
    create: true
    apiVersion: v1beta1
  serviceAccount:
    name: external-dns-service-account
  # AWS Access keys to inject as environment variables
  ## Limit possible target zones by domain suffixes (optional)
  domainFilters: []
  ## Limit possible target zones by zone id (optional)
  zoneIdFilters: []
  ## *** Only watch alb exposed ingresses ***
  annotationFilter: "kubernetes.io/ingress.class=alb"
  ## Adjust the interval for DNS updates
  interval: "1m"


## nginx configuration
## Ref: https://github.com/kubernetes/ingress/blob/master/controllers/nginx/configuration.md
##
nginx:
  controller:
    name: controller
    image:
      repository: quay.io/kubernetes-ingress-controller/nginx-ingress-controller
      tag: "0.24.1"
      pullPolicy: IfNotPresent
      # www-data -> uid 33
      runAsUser: 33

    config:
      use-forwarded-headers: "true"
    # Will add custom header to Nginx https://github.com/kubernetes/ingress-nginx/tree/master/docs/examples/customization/custom-headers
    headers: {}

    # Required for use with CNI based kubernetes installations (such as ones set up by kubeadm),
    # since CNI and hostport don't mix yet. Can be deprecated once https://github.com/kubernetes/kubernetes/issues/23920
    # is merged
    hostNetwork: false

    # Optionally change this to ClusterFirstWithHostNet in case you have 'hostNetwork: true'.
    # By default, while using host network, name resolution uses the host's DNS. If you wish nginx-controller
    # to keep resolving names inside the k8s network, use ClusterFirstWithHostNet.
    dnsPolicy: ClusterFirst

    ## Use host ports 80 and 443
    daemonset:
      useHostPort: false

      hostPorts:
        http: 80
        https: 443
        ## healthz endpoint
        stats: 18080

    ## Required only if defaultBackend.enabled = false
    ## Must be <namespace>/<service_name>
    ##
    defaultBackendService: ""

    ## Election ID to use for status update
    ##
    electionID: ingress-controller-leader

    ## Name of the ingress class to route through this controller
    ##
    ingressClass: nginx

    # labels to add to the pod container metadata
    podLabels: {}
    #  key: value

    ## Allows customization of the external service
    ## the ingress will be bound to via DNS
    publishService:
      enabled: false
      ## Allows overriding of the publish service to bind to
      ## Must be <namespace>/<service_name>
      ##
      pathOverride: ""

    ## Limit the scope of the controller
    ##
    scope:
      enabled: false
      namespace: ""   # defaults to .Release.Namespace

    ## Additional command line arguments to pass to nginx-ingress-controller
    ## E.g. to specify the default SSL certificate you can use
    ## extraArgs:
    ##   default-ssl-certificate: "<namespace>/<secret_name>"
    extraArgs: {}

    ## Additional environment variables to set
    extraEnvs: []
    # extraEnvs:
    #   - name: FOO
    #     valueFrom:
    #       secretKeyRef:
    #         key: FOO
    #         name: secret-resource

    ## DaemonSet or Deployment
    ##
    kind: Deployment

    # The update strategy to apply to the Deployment or DaemonSet
    ##
    updateStrategy: 
      rollingUpdate:
        maxUnavailable: 1
    type: RollingUpdate

    # minReadySeconds to avoid killing pods before we are ready
    ##
    minReadySeconds: 0


    ## Node tolerations for server scheduling to nodes with taints
    ## Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
    ##
    tolerations: []
    #  - key: "key"
    #    operator: "Equal|Exists"
    #    value: "value"
    #    effect: "NoSchedule|PreferNoSchedule|NoExecute(1.6 only)"

    affinity: {}

    ## Node labels for controller pod assignment
    ## Ref: https://kubernetes.io/docs/user-guide/node-selection/
    ##
    nodeSelector: {}

    ## Liveness and readiness probe values
    ## Ref: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
    ##
    livenessProbe:
      failureThreshold: 3
      initialDelaySeconds: 10
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 1
      port: 10254
    readinessProbe:
      failureThreshold: 3
      initialDelaySeconds: 10
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 1
      port: 10254

    ## Annotations to be added to controller pods
    ##
    podAnnotations: {}
    replicaCount: 1
    minAvailable: 1

    resources: {}
    #  limits:
    #    cpu: 100m
    #    memory: 64Mi
    #  requests:
    #    cpu: 100m
    #    memory: 64Mi

    autoscaling:
      enabled: true
      minReplicas: 3
      maxReplicas: 11
      targetCPUUtilizationPercentage: 50
      targetMemoryUtilizationPercentage: 50

    ## Override NGINX template
    customTemplate:
      configMapName: ""
      configMapKey: ""

    service:
      labels: {}
      clusterIP: ""

      ## List of IP addresses at which the controller services are available
      ## Ref: https://kubernetes.io/docs/user-guide/services/#external-ips
      ##
      externalIPs: []

      loadBalancerIP: ""
      loadBalancerSourceRanges: []

      enableHttp: true
      enableHttps: true

      ## Set external traffic policy to: "Local" to preserve source IP on
      ## providers supporting it
      ## Ref: https://kubernetes.io/docs/tutorials/services/source-ip/#source-ip-for-services-with-typeloadbalancer
      externalTrafficPolicy: "Local"

      healthCheckNodePort: 0

      targetPorts:
        http: http
        https: https

      # type: ClusterIP

      type: NodePort
      nodePorts:
        http: 31080
        https: 31443
      # nodePorts:
      #   http: ""
      #   https: ""

    extraContainers: []
    ## Additional containers to be added to the controller pod.
    ## See https://github.com/lemonldap-ng-controller/lemonldap-ng-controller as example.
    #  - name: my-sidecar
    #    image: nginx:latest
    #  - name: lemonldap-ng-controller
    #    image: lemonldapng/lemonldap-ng-controller:0.2.0
    #    args:
    #      - /lemonldap-ng-controller
    #      - --alsologtostderr
    #      - --configmap=$(POD_NAMESPACE)/lemonldap-ng-configuration
    #    env:
    #      - name: POD_NAME
    #        valueFrom:
    #          fieldRef:
    #            fieldPath: metadata.name
    #      - name: POD_NAMESPACE
    #        valueFrom:
    #          fieldRef:
    #            fieldPath: metadata.namespace
    #    volumeMounts:
    #    - name: copy-portal-skins
    #      mountPath: /srv/var/lib/lemonldap-ng/portal/skins

    extraVolumeMounts: []
    ## Additional volumeMounts to the controller main container.
    #  - name: copy-portal-skins
    #   mountPath: /var/lib/lemonldap-ng/portal/skins

    extraVolumes: []
    ## Additional volumes to the controller pod.
    #  - name: copy-portal-skins
    #    emptyDir: {}

    extraInitContainers: []
    ## Containers, which are run before the app containers are started.
    # - name: init-myservice
    #   image: busybox
    #   command: ['sh', '-c', 'until nslookup myservice; do echo waiting for myservice; sleep 2; done;']


    stats:
      enabled: false

      service:
        annotations: {}
        clusterIP: ""

        ## List of IP addresses at which the stats service is available
        ## Ref: https://kubernetes.io/docs/user-guide/services/#external-ips
        ##
        externalIPs: []

        loadBalancerIP: ""
        loadBalancerSourceRanges: []
        servicePort: 18080
        type: ClusterIP

    ## If controller.stats.enabled = true and controller.metrics.enabled = true, Prometheus metrics will be exported
    ##
    metrics:
      enabled: false

      service:
        annotations: {}
        # prometheus.io/scrape: "true"
        # prometheus.io/port: "10254"

        clusterIP: ""

        ## List of IP addresses at which the stats-exporter service is available
        ## Ref: https://kubernetes.io/docs/user-guide/services/#external-ips
        ##
        externalIPs: []

        loadBalancerIP: ""
        loadBalancerSourceRanges: []
        servicePort: 9913
        type: ClusterIP

      serviceMonitor:
        enabled: false
        additionalLabels: {}
        namespace: ""

    lifecycle: {}

    priorityClassName: ""

  ## Rollback limit
  ##
  revisionHistoryLimit: 10

  ## Default 404 backend
  ##
  defaultBackend:

    ## If false, controller.defaultBackendService must be provided
    ##
    enabled: true

    name: default-backend
    image:
      repository: k8s.gcr.io/defaultbackend
      tag: "1.4"
      pullPolicy: IfNotPresent

    extraArgs: {}

    port: 8080

    ## Node tolerations for server scheduling to nodes with taints
    ## Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
    ##
    tolerations: []
    #  - key: "key"
    #    operator: "Equal|Exists"
    #    value: "value"
    #    effect: "NoSchedule|PreferNoSchedule|NoExecute(1.6 only)"

    affinity: {}

    # labels to add to the pod container metadata
    podLabels: {}
    #  key: value

    ## Node labels for default backend pod assignment
    ## Ref: https://kubernetes.io/docs/user-guide/node-selection/
    ##
    nodeSelector: {}

    ## Annotations to be added to default backend pods
    ##
    podAnnotations: {}

    replicaCount: 1

    minAvailable: 1

    resources: {}
    # limits:
    #   cpu: 10m
    #   memory: 20Mi
    # requests:
    #   cpu: 10m
    #   memory: 20Mi

    service:
      annotations: {}

      clusterIP: ""

      ## List of IP addresses at which the default backend service is available
      ## Ref: https://kubernetes.io/docs/user-guide/services/#external-ips
      ##
      externalIPs: []

      loadBalancerIP: ""
      loadBalancerSourceRanges: []
      servicePort: 80
      type: ClusterIP

    priorityClassName: ""

  ## Enable RBAC as per https://github.com/kubernetes/ingress/tree/master/examples/rbac/nginx and https://github.com/kubernetes/ingress/issues/266
  rbac:
    create: true

  # If true, create & use Pod Security Policy resources
  # https://kubernetes.io/docs/concepts/policy/pod-security-policy/
  podSecurityPolicy:
    enabled: false

  serviceAccount:
    create: true
    name: ""

  ## Optional array of imagePullSecrets containing private registry credentials
  ## Ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
  imagePullSecrets: []
  # - name: secretName

  # TCP service key:value pairs
  # Ref: https://github.com/kubernetes/contrib/tree/master/ingress/controllers/nginx/examples/tcp
  ##
  tcp: {}
  #  8080: "default/example-tcp-svc:9000"

  # UDP service key:value pairs
  # Ref: https://github.com/kubernetes/contrib/tree/master/ingress/controllers/nginx/examples/udp
  ##
  udp: {}
  #  53: "kube-system/kube-dns:53"
